import os
import torch
import clip
import hashlib
import webbrowser
import json
import random
from PIL import Image as PILImage

from kivy.graphics import Color, Rectangle
from kivy.app import App
from kivy.uix.screenmanager import ScreenManager, Screen, FadeTransition
from kivy.uix.label import Label
from kivy.uix.button import Button
from kivy.uix.boxlayout import BoxLayout
from kivy.uix.image import Image
from kivy.uix.textinput import TextInput
from kivy.uix.relativelayout import RelativeLayout
from kivy_garden.mapview import MapView, MapMarker
from kivy.uix.filechooser import FileChooserIconView
from kivy.uix.scrollview import ScrollView
from kivy.utils import platform
from transformers import pipeline

# === –ó–∞–≥—Ä—É–∂–∞–µ–º CLIP-–º–æ–¥–µ–ª—å –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π ===
device = "cuda" if torch.cuda.is_available() else "cpu"
model, preprocess = clip.load("ViT-B/32", device=device)


# === –†–∞–±–æ—Ç–∞ —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏ (—Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∏ –≤—Ö–æ–¥) ===
def init_file():
    if not os.path.exists('users.txt'):
        with open('users.txt', 'w'):
            pass


def add_user(login: str, password: str) -> bool:
    with open('users.txt', 'r') as f:
        users = f.read().splitlines()

    for user in users:
        args = user.split(':')
        if login == args[0]:
            return False

    with open('users.txt', 'a') as f:
        f.write(f'{login}:{password}\n')
    return True


def get_user(login: str, password: str) -> bool:
    with open('users.txt', 'r') as f:
        users = f.read().splitlines()

    for user in users:
        args = user.split(':')
        if login == args[0] and password == args[1]:
            return True
    return False

# –ó–∞–≥—Ä—É–∂–∞–µ–º –º–æ–¥–µ–ª—å (–ª–µ–≥–∫–∞—è –≤–µ—Ä—Å–∏—è GPT-2)
generator = pipeline("text-generation", model="distilgpt2")

def ai_bot_reply(user_text):
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –≤–æ–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    response = generator(
        f"–í–æ–ø—Ä–æ—Å: {user_text}\n–û—Ç–≤–µ—Ç –ø—Ä–æ —ç–∫–æ–ª–æ–≥–∏—é:",
        max_length=80,
        num_return_sequences=1,
        do_sample=True,
        temperature=0.7,
        truncation=True
    )
    return response[0]["generated_text"].split("–û—Ç–≤–µ—Ç –ø—Ä–æ —ç–∫–æ–ª–æ–≥–∏—é:")[-1].strip()
init_file()

# === –§–∞–π–ª—ã –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –∏ —Ñ—É–Ω–∫—Ü–∏–∏ ===
DATA_FILE = "user_data.json"
CHAT_FILE = "chat_messages.json"

def load_user_data():
    if os.path.exists(DATA_FILE):
        with open(DATA_FILE, "r") as f:
            return json.load(f)
    return {}

def save_user_data(data):
    with open(DATA_FILE, "w") as f:
        json.dump(data, f)

def load_chat_messages():
    if os.path.exists(CHAT_FILE):
        with open(CHAT_FILE, "r") as f:
            return json.load(f)
    return []

def save_chat_messages(messages):
    with open(CHAT_FILE, "w") as f:
        json.dump(messages, f)
        
# === –•—Ä–∞–Ω–∏–ª–∏—â–µ –¥–∞–Ω–Ω—ã—Ö —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ===
class UserData:
    login = None
    avatar = "default_avatar.png"
    points = 0


# === –ë–∞–∑–æ–≤—ã–π —ç–∫—Ä–∞–Ω ===
# === –ë–∞–∑–æ–≤—ã–π —ç–∫—Ä–∞–Ω ===
class BaseScreen(Screen):
    def __init__(self, **kwargs):
        super().__init__(**kwargs)
        self.layout = RelativeLayout()

        # —Ñ–æ–Ω
        self.bg = Image(source="background.jpg", allow_stretch=True, keep_ratio=False)
        self.layout.add_widget(self.bg)

        # –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è –∫–æ–Ω—Ç–µ–Ω—Ç–∞
        self.content = BoxLayout(
            orientation='vertical',
            padding=20,
            spacing=15,
            size_hint=(0.9, 0.9),
            pos_hint={'center_x': 0.5, 'center_y': 0.5}
        )
        self.layout.add_widget(self.content)

        # üîπ –∫–Ω–æ–ø–∫–∞ –≤—ã—Ö–æ–¥–∞
        self.logout_btn = Button(
            text="–í—ã–π—Ç–∏",
            size_hint=(None, None),
            size=(80, 40),
            pos_hint={"x": 0.01, "top": 0.98},
            background_color=(0.6, 0.2, 0.2, 1),
            color=(1, 1, 1, 1),
            font_size=14
        )
        self.logout_btn.bind(on_press=self.logout)
        self.layout.add_widget(self.logout_btn)

        # –ø—Ä–æ—Ñ–∏–ª—å
        self.profile_box = BoxLayout(
            orientation='vertical',
            size_hint=(None, None),
            height=200,
            width=200,
            spacing=5,
            padding=5,
            pos_hint={'right': 0.98, 'top': 0.98}
        )

        self.avatar_img = Image(source=UserData.avatar, size_hint=(None, None), size=(80, 80))
        self.name_label = Label(text=f"{UserData.login if UserData.login else '–ì–æ—Å—Ç—å'}", color=(1, 1, 1, 1))
        self.points_label = Label(text=f"–ë–∞–ª–ª—ã: {UserData.points}", color=(1, 1, 1, 1))
        self.change_avatar_btn = Button(text="–°–º–µ–Ω–∏—Ç—å", size_hint=(1, None), height=35)
        self.change_avatar_btn.bind(on_press=self.change_avatar)

        self.profile_box.add_widget(self.avatar_img)
        self.profile_box.add_widget(self.name_label)
        self.profile_box.add_widget(self.points_label)
        self.profile_box.add_widget(self.change_avatar_btn)

        self.add_widget(self.layout)
        self.show_profile()

    # -------------------- –ü—Ä–æ—Ñ–∏–ª—å --------------------
    def show_profile(self):
        if self.profile_box.parent is None:
            self.layout.add_widget(self.profile_box)
        self.update_profile()

    def hide_profile(self):
        if self.profile_box.parent:
            self.layout.remove_widget(self.profile_box)

    def update_profile(self):
        self.avatar_img.source = UserData.avatar
        self.avatar_img.reload()
        self.name_label.text = UserData.login if UserData.login else "–ì–æ—Å—Ç—å"
        self.points_label.text = f"–ë–∞–ª–ª—ã: {UserData.points}"

    # -------------------- –í—ã—Ö–æ–¥ --------------------
    def logout(self, instance):
        UserData.login = None
        UserData.avatar = "default_avatar.png"
        UserData.points = 0
        self.manager.current = "auth"
        self.manager.get_screen("auth").update_profile()

    # -------------------- –°–º–µ–Ω–∞ –∞–≤–∞—Ç–∞—Ä–∞ --------------------
    def change_avatar(self, instance):
        self.hide_profile()

        # –∑–∞—Ç–µ–º–Ω–µ–Ω–∏–µ —Ñ–æ–Ω–∞
        self.overlay = RelativeLayout(size_hint=(1,1))
        with self.overlay.canvas:
            Color(0, 0, 0, 0.6)  # —á–µ—Ä–Ω—ã–π —Å –ø—Ä–æ–∑—Ä–∞—á–Ω–æ—Å—Ç—å—é 0.6
            self.dim_rect = Rectangle(size=self.size, pos=self.pos)

        # –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è –≤—ã–±–æ—Ä–∞ –∞–≤–∞—Ç–∞—Ä–∞
        self.avatar_layer = BoxLayout(orientation='vertical', spacing=10, size_hint=(0.8, 0.8), pos_hint={'center_x':0.5, 'center_y':0.5})
        self.avatar_layer.add_widget(Label(text="–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤—ã–π –∞–≤–∞—Ç–∞—Ä", font_size=20, bold=True))

        desktop = os.path.join(os.path.expanduser("~"), "Desktop")
        downloads = os.path.join(os.path.expanduser("~"), "Downloads")

        self.filechooser = FileChooserIconView(path=".", filters=["*.png", "*.jpg", "*.jpeg"], size_hint=(1, 0.8))
        if os.path.exists(desktop):
            self.filechooser.path = desktop
        elif os.path.exists(downloads):
            self.filechooser.path = downloads

        self.filechooser.bind(on_submit=self.selected_avatar)
        self.avatar_layer.add_widget(self.filechooser)

        controls = BoxLayout(size_hint=(1, None), height=50, spacing=10)
        open_btn = Button(text="–û—Ç–∫—Ä—ã—Ç—å", background_color=(0.2, 0.6, 0.8, 1))
        open_btn.bind(on_press=lambda x: self.selected_avatar(None, self.filechooser.selection, None))
        cancel_btn = Button(text="–û—Ç–º–µ–Ω–∞", background_color=(0.6, 0.2, 0.2, 1))
        cancel_btn.bind(on_press=lambda x: self.remove_avatar_layer())
        controls.add_widget(open_btn)
        controls.add_widget(cancel_btn)
        self.avatar_layer.add_widget(controls)

        self.overlay.add_widget(self.avatar_layer)
        self.layout.add_widget(self.overlay)

    def remove_avatar_layer(self):
        if hasattr(self, 'overlay'):
            self.layout.remove_widget(self.overlay)
            del self.overlay
        self.show_profile()  # –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π –∫–æ–Ω—Ç–µ–Ω—Ç

    def selected_avatar(self, filechooser, selection, touch):
        if selection:
            file_path = selection[0]
            os.makedirs("avatars", exist_ok=True)
            new_path = os.path.join("avatars", f"{UserData.login}_avatar.png")
            PILImage.open(file_path).save(new_path)
            UserData.avatar = new_path

            # –æ–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ—Ñ–∏–ª—å –Ω–∞ –≤—Å–µ—Ö —ç–∫—Ä–∞–Ω–∞—Ö
            self.update_profile()
            for screen in self.manager.screens:
                if isinstance(screen, BaseScreen):
                    screen.update_profile()

            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥"
            self.avatar_layer.clear_widgets()
            self.avatar_layer.add_widget(Label(text="–ê–≤–∞—Ç–∞—Ä —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω—ë–Ω!", font_size=20, bold=True))
            back_btn = Button(
                text="–ù–∞–∑–∞–¥",
                size_hint=(1, None),
                height=50,
                background_color=(0.2, 0.6, 0.2, 1)
            )
            back_btn.bind(on_press=lambda x: self.remove_avatar_layer())
            self.avatar_layer.add_widget(back_btn)



# === –≠–∫—Ä–∞–Ω –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ ===
# === –≠–∫—Ä–∞–Ω –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ ===
class AuthScreen(BaseScreen):
    def __init__(self, **kwargs):
        super().__init__(**kwargs)
        self.hide_profile()
        self.logout_btn.opacity = 0
        self.logout_btn.disabled = True

        self.content.add_widget(Label(
            text="–í—Ö–æ–¥ / –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è",
            font_size=26,
            bold=True,
            color=(1, 1, 1, 1)
        ))

        self.login_input = TextInput(hint_text="–õ–æ–≥–∏–Ω", multiline=False, size_hint=(1, None), height=40)
        self.password_input = TextInput(hint_text="–ü–∞—Ä–æ–ª—å", multiline=False, password=True, size_hint=(1, None), height=40)
        self.content.add_widget(self.login_input)
        self.content.add_widget(self.password_input)

        btns = BoxLayout(size_hint=(1, None), height=50, spacing=10)
        login_btn = Button(text="–í–æ–π—Ç–∏", background_color=(0.2, 0.6, 0.2, 1))
        reg_btn = Button(text="–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è", background_color=(0.2, 0.6, 0.8, 1))
        login_btn.bind(on_press=self.login)
        reg_btn.bind(on_press=self.register)
        btns.add_widget(login_btn)
        btns.add_widget(reg_btn)
        self.content.add_widget(btns)

        self.message = Label(text="", color=(1, 1, 1, 1), font_size=16)
        self.content.add_widget(self.message)

    def update_profile(self):
        pass  # –≤ –æ–∫–Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –ø—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω—É–∂–µ–Ω

    def login(self, instance):
        login_text = self.login_input.text.strip()
        password_text = hashlib.sha256(self.password_input.text.strip().encode()).hexdigest()
        if get_user(login_text, password_text):
            UserData.login = login_text
            avatar_path = os.path.join("avatars", f"{login_text}_avatar.png")
            UserData.avatar = avatar_path if os.path.exists(avatar_path) else "default_avatar.png"

            # üîπ –∑–∞–≥—Ä—É–∂–∞–µ–º –±–∞–ª–ª—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ —Ñ–∞–π–ª–∞
            data = load_user_data()
            UserData.points = data.get(UserData.login, {}).get("points", 0)

            self.manager.current = "main"
            self.manager.get_screen("main").show_profile()
        else:
            self.message.text = "–ù–µ–≤–µ—Ä–Ω—ã–π –ª–æ–≥–∏–Ω –∏–ª–∏ –ø–∞—Ä–æ–ª—å!"

    def register(self, instance):
        login_text = self.login_input.text.strip()
        password_text = self.password_input.text.strip()

        if not login_text or not password_text:
            self.message.text = "–í–≤–µ–¥–∏—Ç–µ –ª–æ–≥–∏–Ω –∏ –ø–∞—Ä–æ–ª—å!"
            return

        password_hashed = hashlib.sha256(password_text.encode()).hexdigest()
        if add_user(login_text, password_hashed):
            self.message.text = "–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ! –¢–µ–ø–µ—Ä—å –≤–æ–π–¥–∏—Ç–µ."
        else:
            self.message.text = "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç!"


# === –ì–ª–∞–≤–Ω—ã–π —ç–∫—Ä–∞–Ω ===
class MainScreen(BaseScreen):
    def __init__(self, **kwargs):
        super().__init__(**kwargs)
        self.show_profile()

        # –û—Å–Ω–æ–≤–Ω–æ–π ScrollView
        self.scroll = ScrollView(size_hint=(1, 1))
        self.main_layout = BoxLayout(orientation='vertical', spacing=10, size_hint_y=None)
        self.main_layout.bind(minimum_height=self.main_layout.setter('height'))
        self.scroll.add_widget(self.main_layout)
        self.content.add_widget(self.scroll)

        # üîπ –ó–∞–≥–æ–ª–æ–≤–æ–∫
        self.title_label = Label(
            text="–ú–∏—Å–∫–∞ –¥–æ–±—Ä–∞ - –¥–æ–±—Ä–æ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å –≤–∞—Å!\n–ü–æ–º–æ–≥–∏—Ç–µ –Ω–∞–∫–æ—Ä–º–∏—Ç—å –∂–∏–≤–æ—Ç–Ω—ã—Ö –≤ –ø—Ä–∏—é—Ç–µ",
            font_size=30,
            bold=True,
            color=(1,1,1,1),
            size_hint_y=None,
            height=120
        )
        self.main_layout.add_widget(self.title_label)

        # üîπ –õ–∏–¥–µ—Ä–±–æ—Ä–¥
        self.leaderboard_box = BoxLayout(orientation='vertical', size_hint_y=None, spacing=5)
        self.main_layout.add_widget(self.leaderboard_box)
        self.update_leaderboard()

        # üîπ –ö–Ω–æ–ø–∫–∏
        self.buttons_layout = BoxLayout(orientation='vertical', spacing=10, size_hint_y=None)
        self.buttons_layout.bind(minimum_height=self.buttons_layout.setter('height'))
        self.main_layout.add_widget(self.buttons_layout)

        buttons = [
            ("–ö–∞—Ä—Ç–∞ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤", self.go_to_map),
            ("–ü—Ä–æ–≤–µ—Ä–∫–∞ –µ–¥—ã", self.go_to_food),
            ("–ú–µ—Å—Å–µ–Ω–¥–∂–µ—Ä", self.go_to_chat),
            ("–í–æ–ª–æ–Ω—Ç–µ—Ä—Å—Ç–≤–æ", self.go_to_volunteer),
            ("–ú–∞–≥–∞–∑–∏–Ω", self.go_to_store),
            ("–û –ø—Ä–æ–µ–∫—Ç–µ", self.go_to_about),
            ("–ò–ò-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç", self.go_to_ai)
        ]

        for text, action in buttons:
            btn = Button(
                text=text,
                background_color=(0.2, 0.6, 0.2, 1),
                color=(1,1,1,1),
                font_size=18,
                size_hint=(1,None),
                height=50
            )
            btn.bind(on_press=action)
            self.buttons_layout.add_widget(btn)

    def reset_ui(self):
        """–ü–µ—Ä–µ—Ä–∏—Å–æ–≤–∫–∞ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ –ø–æ—Å–ª–µ —Å–º–µ–Ω—ã –∞–≤–∞—Ç–∞—Ä–∞ –∏–ª–∏ –¥–µ–π—Å—Ç–≤–∏–π"""
        self.main_layout.clear_widgets()
        self.main_layout.add_widget(self.title_label)
        self.main_layout.add_widget(self.leaderboard_box)
        self.update_leaderboard()
        self.main_layout.add_widget(self.buttons_layout)

    def update_leaderboard(self):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–æ–ø-3 –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ total_points"""
        data = load_user_data()
        sorted_users = sorted(data.items(), key=lambda x: x[1].get("total_points", 0), reverse=True)

        self.leaderboard_box.clear_widgets()
        self.leaderboard_box.add_widget(Label(
            text="üèÜ –õ–∏–¥–µ—Ä–±–æ—Ä–¥",
            font_size=22,
            bold=True,
            color=(1,1,1,1),
            size_hint_y=None,
            height=40
        ))

        for i, (username, stats) in enumerate(sorted_users[:3], start=1):
            points = stats.get("total_points", 0)
            label = Label(
                text=f"{i}. {username} ‚Äî {points} –æ—á–∫–æ–≤",
                font_size=18,
                color=(1,1,1,1),
                size_hint_y=None,
                height=30
            )
            self.leaderboard_box.add_widget(label)

    # üîπ –ü–µ—Ä–µ—Ö–æ–¥—ã –Ω–∞ –¥—Ä—É–≥–∏–µ —ç–∫—Ä–∞–Ω—ã
    def go_to_map(self, instance):
        self.manager.current = "map"
        self.manager.get_screen("map").show_profile()
    
    def go_to_ai(self, instance):
        self.manager.current = "eco_ai"
        self.manager.get_screen("eco_ai").show_profile()

    def go_to_food(self, instance):
        self.manager.current = "food"
        self.manager.get_screen("food").show_profile()

    def go_to_chat(self, instance):
        self.manager.current = "chat"
        self.manager.get_screen("chat").show_profile()
        
    def go_to_about(self, instance):
        self.manager.current = "about"
        self.manager.get_screen("about").show_profile()       
        
    def go_to_volunteer(self, instance):
        self.manager.current = "volunteer"
        self.manager.get_screen("volunteer").show_profile()
        
    def go_to_store(self, instance):
        self.manager.current = "store"
        self.manager.get_screen("store").show_profile()





# === –≠–∫—Ä–∞–Ω –º–µ—Å—Å–µ–Ω–¥–∂–µ—Ä–∞ ===
class ChatScreen(BaseScreen):
    def __init__(self, **kwargs):
        super().__init__(**kwargs)
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –≤—Å–µ –ø—Ä–µ–¥—ã–¥—É—â–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
        self.messages = load_chat_messages()

        self.chat_box = BoxLayout(orientation='vertical', spacing=10, size_hint=(1, None))
        self.chat_box.bind(minimum_height=self.chat_box.setter('height'))

        self.scroll = ScrollView(size_hint=(1, 0.75))
        self.scroll.add_widget(self.chat_box)
        self.content.add_widget(self.scroll)

        self.input_box = BoxLayout(size_hint=(1, None), height=40, spacing=10)
        self.msg_input = TextInput(multiline=False, size_hint=(0.8, 1))
        self.send_btn = Button(text="–û—Ç–ø—Ä–∞–≤–∏—Ç—å", size_hint=(0.2, 1), background_color=(0.2, 0.6, 0.8, 1))
        self.send_btn.bind(on_press=self.send_message)
        self.input_box.add_widget(self.msg_input)
        self.input_box.add_widget(self.send_btn)
        self.content.add_widget(self.input_box)

        # üîπ –∫–Ω–æ–ø–∫–∞ "–ù–∞–∑–∞–¥"
        self.back_btn = Button(
            text="–ù–∞–∑–∞–¥",
            size_hint=(1, None),
            height=50,
            background_color=(0.2, 0.6, 0.2, 1)
        )
        self.back_btn.bind(on_press=self.go_back)
        self.content.add_widget(self.back_btn)

        self.show_profile()

        # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
        for msg in self.messages:
            self.add_message(msg["username"], msg["avatar"], msg["text"])

    def send_message(self, instance):
        text = self.msg_input.text.strip()
        if text:
            self.add_message(UserData.login, UserData.avatar, text)

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —Å–ø–∏—Å–æ–∫ –∏ —Ñ–∞–π–ª
            self.messages.append({
                "username": UserData.login,
                "avatar": UserData.avatar,
                "text": text
            })
            save_chat_messages(self.messages)
            self.msg_input.text = ""

    def add_message(self, username, avatar_path, text):
        msg_layout = BoxLayout(size_hint_y=None, height=50, spacing=10)
        avatar = Image(source=avatar_path, size_hint=(None, None), size=(40, 40))
        label = Label(text=f"[b]{username}[/b]: {text}", markup=True, valign="middle")
        msg_layout.add_widget(avatar)
        msg_layout.add_widget(label)
        self.chat_box.add_widget(msg_layout)
        self.scroll.scroll_to(msg_layout)

    def go_back(self, instance):
        self.manager.current = "main"
        self.manager.get_screen("main").show_profile()




# —Å–ø–∏—Å–æ–∫ —Å–æ–≤–µ—Ç–æ–≤ –¥–ª—è "–ú–∏—Å–∫–∏ –¥–æ–±—Ä–∞"
ECO_TIPS = [
    "–û—Ç–¥–∞–≤–∞–π –ª–∏—à–Ω—é—é –µ–¥—É –≤ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã —Ä—è–¥–æ–º —Å –¥–æ–º–æ–º ‚Äî —ç—Ç–æ –ø–æ–º–æ–∂–µ—Ç –Ω—É–∂–¥–∞—é—â–∏–º—Å—è –∏ —Å–æ–∫—Ä–∞—Ç–∏—Ç –æ—Ç—Ö–æ–¥—ã.",
    "–ù–µ –≤—ã–±—Ä–∞—Å—ã–≤–∞–π —Å—Ç–∞—Ä—É—é –æ–¥–µ–∂–¥—É: –µ—ë –º–æ–∂–Ω–æ —Å–¥–∞—Ç—å –≤ –ø—Ä–∏—ë–º–Ω—ã–π –ø—É–Ω–∫—Ç –∏–ª–∏ –æ—Ç–¥–∞—Ç—å –≤ –ø—Ä–∏—é—Ç.",
    "–ò—Å–ø–æ–ª—å–∑—É–π –º–Ω–æ–≥–æ—Ä–∞–∑–æ–≤—ã–µ —Å—É–º–∫–∏ –∏ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã, —á—Ç–æ–±—ã —É–º–µ–Ω—å—à–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–ª–∞—Å—Ç–∏–∫–∞.",
    "–î–µ–ª–∏—Å—å –≤–µ—â–∞–º–∏, –∫–æ—Ç–æ—Ä—ã–µ —Ç–µ–±–µ –±–æ–ª—å—à–µ –Ω–µ –Ω—É–∂–Ω—ã ‚Äî –æ–Ω–∏ –º–æ–≥—É—Ç —Å—Ç–∞—Ç—å –ø–æ–ª–µ–∑–Ω—ã–º–∏ –¥–ª—è –¥—Ä—É–≥–∏—Ö.",
    "–°—Ç–∞—Ä–∞–π—Å—è –ø–æ–∫—É–ø–∞—Ç—å –ø—Ä–æ–¥—É–∫—Ç—ã —Å –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–π —É–ø–∞–∫–æ–≤–∫–æ–π, —ç—Ç–æ —Å–Ω–∏–∂–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –º—É—Å–æ—Ä–∞.",
    "–û—Ä–≥–∞–Ω–∏–∑—É–π —É —Å–µ–±—è –¥–æ–º–∞ –∫–æ—Ä–æ–±–∫—É –¥–ª—è –≤–µ—â–µ–π, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–∂–Ω–æ –ø–æ–∂–µ—Ä—Ç–≤–æ–≤–∞—Ç—å.",
    "–£—á–∞—Å—Ç–≤—É–π –≤ –∞–∫—Ü–∏—è—Ö –ø–æ –ø–µ—Ä–µ—Ä–∞–±–æ—Ç–∫–µ: –±–∞—Ç–∞—Ä–µ–π–∫–∏, –ø–ª–∞—Å—Ç–∏–∫, –º–∞–∫—É–ª–∞—Ç—É—Ä–∞ ‚Äî –≤—Å—ë —ç—Ç–æ –º–æ–∂–Ω–æ —Å–¥–∞—Ç—å.",
    "–°—Ç–∞–Ω—å –≤–æ–ª–æ–Ω—Ç—ë—Ä–æ–º –ø—Ä–æ–µ–∫—Ç–∞ '–ú–∏—Å–∫–∞ –¥–æ–±—Ä–∞' –∏ –ø–æ–º–æ–≥–∞–π —Å–æ–±–∏—Ä–∞—Ç—å –ø–æ–∂–µ—Ä—Ç–≤–æ–≤–∞–Ω–∏—è.",
    "–†–∞—Å—Å–∫–∞–∂–∏ –¥—Ä—É–∑—å—è–º –æ –ø—Ä–æ–µ–∫—Ç–µ ‚Äî –≤–º–µ—Å—Ç–µ –º—ã –º–æ–∂–µ–º –ø–æ–º–æ—á—å –±–æ–ª—å—à–µ–º—É –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –ª—é–¥–µ–π.",
    "–≠–∫–æ–Ω–æ–º—å —ç–ª–µ–∫—Ç—Ä–æ—ç–Ω–µ—Ä–≥–∏—é –∏ –≤–æ–¥—É ‚Äî —ç—Ç–æ —Ç–æ–∂–µ –≤–∫–ª–∞–¥ –≤ –∑–∞–±–æ—Ç—É –æ –ø–ª–∞–Ω–µ—Ç–µ."
]


class EcoAssistantScreen(BaseScreen):
    def __init__(self, **kwargs):
        super().__init__(**kwargs)

        # –æ—á–∏—â–∞–µ–º content –∏ —Ä–∏—Å—É–µ–º —á–∞—Ç
        self.content.clear_widgets()

        # üîπ –≤–µ—Ä—Ö–Ω—è—è –ø–∞–Ω–µ–ª—å —Å –∫–Ω–æ–ø–∫–∞–º–∏
        top_bar = BoxLayout(size_hint=(1, None), height=50, spacing=10)

        back_btn = Button(
            text="‚¨Ö –ù–∞–∑–∞–¥",
            size_hint=(None, 1),
            width=100,
            background_color=(0.2, 0.6, 0.8, 1)
        )
        back_btn.bind(on_press=self.go_back)

        tip_btn = Button(
            text="–°–æ–≤–µ—Ç –¥–Ω—è üå±",
            size_hint=(None, 1),
            width=150,
            background_color=(0.2, 0.8, 0.4, 1)
        )
        tip_btn.bind(on_press=self.show_random_tip)

        top_bar.add_widget(back_btn)
        top_bar.add_widget(tip_btn)
        self.content.add_widget(top_bar)

        # –ü—Ä–æ–∫—Ä—É—á–∏–≤–∞–µ–º–∞—è –æ–±–ª–∞—Å—Ç—å –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏–π
        self.chat_log = BoxLayout(orientation="vertical", size_hint_y=None, spacing=10)
        self.chat_log.bind(minimum_height=self.chat_log.setter("height"))

        scroll = ScrollView(size_hint=(1, 0.7))
        scroll.add_widget(self.chat_log)
        self.content.add_widget(scroll)

        # –ü–æ–ª–µ –≤–≤–æ–¥–∞ + –∫–Ω–æ–ø–∫–∞ "–û—Ç–ø—Ä–∞–≤–∏—Ç—å"
        input_box = BoxLayout(size_hint=(1, 0.15), spacing=5)
        self.user_input = TextInput(hint_text="–í–≤–µ–¥–∏—Ç–µ –≤–æ–ø—Ä–æ—Å...", multiline=False)
        send_btn = Button(text="–û—Ç–ø—Ä–∞–≤–∏—Ç—å", size_hint=(None, 1), width=120)
        send_btn.bind(on_press=self.send_message)

        input_box.add_widget(self.user_input)
        input_box.add_widget(send_btn)
        self.content.add_widget(input_box)

    def add_message(self, sender, text):
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —á–∞—Ç"""
        msg = Label(
            text=f"[b]{sender}: [/b]{text}",
            markup=True,
            size_hint_y=None,
            height=40,
            halign="left",
            valign="middle"
        )
        msg.bind(texture_size=msg.setter("size"))
        self.chat_log.add_widget(msg)

    def send_message(self, instance):
        user_text = self.user_input.text.strip()
        if not user_text:
            return

        # –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        self.add_message("–¢—ã", user_text)
        self.user_input.text = ""

        # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç–≤–µ—Ç–∞ AI
        reply = ai_bot_reply(user_text)
        self.add_message("Eco-–±–æ—Ç", reply)

    def show_random_tip(self, instance):
        """–ü–æ–∫–∞–∑–∞—Ç—å —Å–ª—É—á–∞–π–Ω—ã–π —Å–æ–≤–µ—Ç"""
        tip = random.choice(ECO_TIPS)
        self.add_message("–°–æ–≤–µ—Ç", tip)

    def go_back(self, instance):
        """–í–æ–∑–≤—Ä–∞—Ç –Ω–∞ –≥–ª–∞–≤–Ω—ã–π —ç–∫—Ä–∞–Ω"""
        self.manager.current = "main"
        self.manager.get_screen("main").show_profile()


# === –≠–∫—Ä–∞–Ω —Å –∫–∞—Ä—Ç–æ–π ===
class MapScreen(BaseScreen):
    def __init__(self, **kwargs):
        super().__init__(**kwargs)
        self.show_profile()

        self.header = Label(text="–ö–∞—Ä—Ç–∞ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤", font_size=22, bold=True)
        self.content.add_widget(self.header)

        self.map_view = MapView(zoom=14, lat=53.2835, lon=69.3969)
        self.content.add_widget(self.map_view)
        self.add_markers()

        self.content.add_widget(Button(
            text="–ù–∞–∑–∞–¥",
            background_color=(0.2, 0.6, 0.2, 1),
            on_press=self.go_back
        ))

    def reset_ui(self):
        self.content.clear_widgets()
        self.content.add_widget(self.header)
        self.content.add_widget(self.map_view)

    def add_markers(self):
        locations = [
            {"lat": 53.2835, "lon": 69.3969, "icon": "cache/eco_bin_icon.jpg"},
            {"lat": 53.2821, "lon": 69.3897, "icon": "cache/eco_bin_icon.jpg"},
            {"lat": 53.2940, "lon": 69.4048, "icon": "cache/eco_bin_icon.jpg"},
        ]
        for loc in locations:
            marker = MapMarker(lat=loc["lat"], lon=loc["lon"], source=loc["icon"])
            self.map_view.add_widget(marker)

    def go_back(self, instance):
        self.manager.current = "main"
        self.manager.get_screen("main").show_profile()
        
class AboutScreen(BaseScreen):
    def __init__(self, **kwargs):
        super().__init__(**kwargs)
        self.show_profile()

        # –¢–µ–∫—Å—Ç –ø–æ—Å–µ—Ä–µ–¥–∏–Ω–µ
        self.content.add_widget(Label(
             text=(
             "–ú–∏—Å–∫–∞ –¥–æ–±—Ä–∞ ‚Äî —Å–æ—Ü–∏–∞–ª—å–Ω—ã–π –∏ —ç–∫–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–π –ø—Ä–æ–µ–∫—Ç.\n"
             "–ú—ã —Å–æ–∫—Ä–∞—â–∞–µ–º –ø–∏—â–µ–≤—ã–µ –æ—Ç—Ö–æ–¥—ã –∏ –ø–µ—Ä–µ—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –Ω–µ–Ω—É–∂–Ω—ã–µ –≤–µ—â–∏.\n"
             "–ü–æ–º–æ–≥–∞–µ–º –Ω—É–∂–¥–∞—é—â–∏–º—Å—è –∏ —Å–æ–∑–¥–∞—ë–º —Å–æ–æ–±—â–µ—Å—Ç–≤–æ –ª—é–¥–µ–π, –∑–∞–±–æ—Ç—è—â–∏—Ö—Å—è –æ –ø–ª–∞–Ω–µ—Ç–µ."
             ),
    font_size=18,
    color=(1, 1, 1, 1),
    halign="center",
    valign="middle"
))



        # –ö–Ω–æ–ø–∫–∏
        btns = BoxLayout(size_hint=(1, None), height=50, spacing=10)
        
        open_site_btn = Button(text="–î–∞–Ω–Ω—ã–µ –æ –Ω–∞—Å", background_color=(0.2, 0.6, 0.8, 1))
        open_site_btn.bind(on_press=self.open_site)
        
        back_btn = Button(text="–ù–∞–∑–∞–¥", background_color=(0.2, 0.6, 0.2, 1))
        back_btn.bind(on_press=self.go_back)
        
        btns.add_widget(open_site_btn)
        btns.add_widget(back_btn)
        self.content.add_widget(btns)

    def open_site(self, instance):
        webbrowser.open("https://liberty74.github.io/")

    def go_back(self, instance):
        self.manager.current = "main"
        self.manager.get_screen("main").show_profile()       
        
        
        
class VolunteerScreen(BaseScreen):
    def __init__(self, **kwargs):
        super().__init__(**kwargs)
        self.show_profile()

        self.header = Label(text="–í–æ–ª–æ–Ω—Ç–µ—Ä—Å—Ç–≤–æ", font_size=22, bold=True)
        self.content.add_widget(self.header)

        # –°–ø–∏—Å–æ–∫ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π
        self.activities = [
            {"name": "–ü–æ–¥–∫–æ—Ä–º–∫–∞ –∂–∏–≤–æ—Ç–Ω—ã—Ö", "date": "2025-09-20", "time": "10:00"},
            {"name": "–°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –µ–¥—ã", "date": "2025-09-21", "time": "12:00"},
            {"name": "–°–±–æ—Ä –µ–¥—ã —É –º–∞–≥–∞–∑–∏–Ω–æ–≤", "date": "2025-09-22", "time": "09:00"},
            {"name": "–î–æ—Å—Ç–∞–≤–∫–∞ –µ–¥—ã –≤ –ø—Ä–∏—é—Ç", "date": "2025-09-23", "time": "14:00"},
        ]

        # –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è –∫–Ω–æ–ø–æ–∫
        self.activities_box = BoxLayout(orientation='vertical', spacing=10, size_hint=(1, None))
        self.activities_box.bind(minimum_height=self.activities_box.setter('height'))

        for act in self.activities:
            btn = Button(
                text=f"{act['name']} ({act['date']} {act['time']})",
                size_hint=(1, None),
                height=50,
                background_color=(0.2, 0.6, 0.8, 1)
            )
            btn.bind(on_press=lambda x, a=act: self.join_activity(a))
            self.activities_box.add_widget(btn)

        self.scroll = ScrollView(size_hint=(1, 0.75))
        self.scroll.add_widget(self.activities_box)
        self.content.add_widget(self.scroll)

        # –ö–Ω–æ–ø–∫–∞ "–ù–∞–∑–∞–¥"
        self.back_btn = Button(
            text="–ù–∞–∑–∞–¥",
            size_hint=(1, None),
            height=50,
            background_color=(0.2, 0.6, 0.2, 1)
        )
        self.back_btn.bind(on_press=self.go_back)
        self.content.add_widget(self.back_btn)

    def join_activity(self, activity):
        points_earned = 10
        UserData.points += points_earned

        data = load_user_data()
        if UserData.login not in data:
            data[UserData.login] = {"points": 0, "total_points": 0}

        # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Ç–µ–∫—É—â–∏–µ –±–∞–ª–ª—ã –∏ —Å—É–º–º–∞—Ä–Ω—ã–µ
        data[UserData.login]["points"] = UserData.points
        data[UserData.login]["total_points"] = data[UserData.login].get("total_points", 0) + points_earned

        save_user_data(data)
        self.update_profile()

        self.result_label = Label(
            text=f"–í—ã –∑–∞–ø–∏—Å–∞–ª–∏—Å—å –Ω–∞: {activity['name']}!\n–ë–∞–ª–ª—ã +{points_earned} (–∏—Ç–æ–≥–æ: {UserData.points})",
            font_size=16,
            color=(1, 1, 1, 1)
        )
        self.content.add_widget(self.result_label)

    def go_back(self, instance):
        self.manager.current = "main"
        self.manager.get_screen("main").show_profile()



# === –≠–∫—Ä–∞–Ω –ø—Ä–æ–≤–µ—Ä–∫–∏ –µ–¥—ã ===
class FoodScreen(BaseScreen):
    def __init__(self, **kwargs):
        super().__init__(**kwargs)
        self.show_profile()

        self.header = Label(text="–ü—Ä–æ–≤–µ—Ä–∫–∞ –µ–¥—ã", font_size=22, bold=True)
        self.content.add_widget(self.header)

        self.upload_btn = Button(
            text="–ó–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–æ—Ç–æ",
            background_color=(0.2, 0.6, 0.8, 1),
            font_size=18,
            size_hint=(1, None),
            height=50
        )
        self.upload_btn.bind(on_press=self.open_filechooser)
        self.content.add_widget(self.upload_btn)

        self.food_img = Image(size_hint=(1, 0.6))
        self.content.add_widget(self.food_img)

        self.result_label = Label(text="–ó–¥–µ—Å—å –ø–æ—è–≤–∏—Ç—Å—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç", font_size=18, color=(1, 1, 1, 1))
        self.content.add_widget(self.result_label)

        self.back_btn = Button(
            text="–ù–∞–∑–∞–¥",
            background_color=(0.2, 0.6, 0.2, 1),
            on_press=self.go_back
        )
        self.content.add_widget(self.back_btn)

    def reset_ui(self):
        self.content.clear_widgets()
        self.content.add_widget(self.header)
        self.content.add_widget(self.upload_btn)
        self.content.add_widget(self.food_img)
        self.content.add_widget(self.result_label)
        self.content.add_widget(self.back_btn)

    def open_filechooser(self, instance):
        self.content.clear_widgets()
        self.content.add_widget(Label(text="–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–æ—Ç–æ", font_size=20, bold=True))

        desktop = os.path.join(os.path.expanduser("~"), "Desktop")
        downloads = os.path.join(os.path.expanduser("~"), "Downloads")

        self.filechooser = FileChooserIconView(path=".", filters=["*.png", "*.jpg", "*.jpeg"], size_hint=(1, 0.8))
        if os.path.exists(desktop):
            self.filechooser.path = desktop
        elif os.path.exists(downloads):
            self.filechooser.path = downloads

        self.filechooser.bind(on_submit=self.selected_file)
        self.content.add_widget(self.filechooser)

        controls = BoxLayout(size_hint=(1, None), height=50, spacing=10)
        open_btn = Button(text="–û—Ç–∫—Ä—ã—Ç—å", background_color=(0.2, 0.6, 0.8, 1))
        open_btn.bind(on_press=lambda x: self.selected_file(None, self.filechooser.selection, None))
        cancel_btn = Button(text="–û—Ç–º–µ–Ω–∞", background_color=(0.6, 0.2, 0.2, 1))
        cancel_btn.bind(on_press=lambda x: self.reset_ui())
        controls.add_widget(open_btn)
        controls.add_widget(cancel_btn)
        self.content.add_widget(controls)

    def selected_file(self, filechooser, selection, touch):
        if selection:
            file_path = selection[0]
            self.food_img.source = file_path
            self.analyze_image(file_path)
            self.reset_ui()

    def analyze_image(self, file_path):
        image = preprocess(PILImage.open(file_path)).unsqueeze(0).to(device)
        text_descriptions = ["not food", "fresh food", "edible food", "tasty food", "rotten food", "food with mold"]
        text_tokens = clip.tokenize(text_descriptions).to(device)

        with torch.no_grad():
            image_features = model.encode_image(image)
            text_features = model.encode_text(text_tokens)
            image_features /= image_features.norm(dim=-1, keepdim=True)
            text_features /= text_features.norm(dim=-1, keepdim=True)
            similarity = (image_features @ text_features.T).squeeze(0)

        best_idx = similarity.argmax().item()
        best_label = text_descriptions[best_idx]

        if "fresh" in best_label or "edible" in best_label or "tasty" in best_label:
            result_text = "–≠—Ç—É –µ–¥—É –º–æ–∂–Ω–æ –µ—Å—Ç—å!"
        elif "rotten" in best_label or "mold" in best_label:
            result_text = "–≠—Ç—É –µ–¥—É –µ—Å—Ç—å –Ω–µ–ª—å–∑—è!"
        else:
            result_text = "–≠—Ç–æ –Ω–µ –µ–¥–∞!"

        self.result_label.text = f"CLIP —Å—á–∏—Ç–∞–µ—Ç: {best_label}\n\n{result_text}"

    def go_back(self, instance):
        self.manager.current = "main"
        self.manager.get_screen("main").show_profile()
        
# === –≠–∫—Ä–∞–Ω –º–∞–≥–∞–∑–∏–Ω–∞ —Å –∫—Ä–∞—Å–∏–≤—ã–º –∫–∞—Ç–∞–ª–æ–≥–æ–º ===
class StoreScreen(BaseScreen):
    def __init__(self, **kwargs):
        super().__init__(**kwargs)
        self.show_profile()

        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        self.header = Label(
            text="–ú–∞–≥–∞–∑–∏–Ω",
            font_size=28,
            bold=True,
            color=(1, 1, 1, 1),
            size_hint=(1, None),
            height=50
        )
        self.content.add_widget(self.header)

        # ScrollView –¥–ª—è –∫–∞—Ç–∞–ª–æ–≥–∞
        self.scroll = ScrollView(size_hint=(1, 0.75))
        self.catalog_box = BoxLayout(
            orientation='vertical',
            spacing=15,
            padding=10,
            size_hint_y=None
        )
        self.catalog_box.bind(minimum_height=self.catalog_box.setter('height'))
        self.scroll.add_widget(self.catalog_box)
        self.content.add_widget(self.scroll)

        # –°–æ–æ–±—â–µ–Ω–∏–µ –æ –ø–æ–∫—É–ø–∫–µ
        self.message_label = Label(
            text="",
            font_size=16,
            color=(1, 1, 1, 1),
            size_hint=(1, None),
            height=30
        )
        self.content.add_widget(self.message_label)

        # –ö–Ω–æ–ø–∫–∞ "–ù–∞–∑–∞–¥"
        self.back_btn = Button(
            text="–ù–∞–∑–∞–¥",
            size_hint=(1, None),
            height=50,
            background_color=(0.2, 0.6, 0.2, 1)
        )
        self.back_btn.bind(on_press=self.go_back)
        self.content.add_widget(self.back_btn)

        # === –°–Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞—ë–º —Å–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤ ===
        self.items = [
            {"name": "–£–≤–∞–∂–µ–Ω–∏–µ", "cost": 100, "description": "–ü—Ä–æ—è–≤–∏—Ç–µ —É–≤–∞–∂–µ–Ω–∏–µ –∫ —Å–æ–æ–±—â–µ—Å—Ç–≤—É, –ø–æ—Ç—Ä–∞—Ç–∏–≤ –±–∞–ª–ª—ã."},
        ]

        # –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–æ–≤–∞—Ä—ã
        self.load_items()

    def load_items(self):
        self.catalog_box.clear_widgets()
        for item in self.items:
            # –û–±—ë—Ä—Ç–∫–∞ –¥–ª—è —Ç–æ–≤–∞—Ä–∞
            item_layout = BoxLayout(
                orientation='vertical',
                size_hint=(1, None),
                height=120,
                padding=10,
                spacing=5
            )

            # –ù–∞–∑–≤–∞–Ω–∏–µ –∏ —Å—Ç–æ–∏–º–æ—Å—Ç—å
            title = Label(
                text=f"{item['name']} - {item['cost']} –±–∞–ª–ª–æ–≤",
                font_size=20,
                bold=True,
                color=(1, 1, 1, 1)
            )
            desc = Label(
                text=item['description'],
                font_size=16,
                color=(0.9, 0.9, 0.9, 1),
                halign="left",
                valign="middle"
            )
            desc.bind(size=desc.setter('text_size'))

            # –ö–Ω–æ–ø–∫–∞ "–ö—É–ø–∏—Ç—å"
            buy_btn = Button(
                text="–ö—É–ø–∏—Ç—å",
                size_hint=(1, None),
                height=40,
                background_color=(0.2, 0.6, 0.8, 1)
            )
            buy_btn.bind(on_press=lambda x, i=item: self.buy_item(i))

            # –î–æ–±–∞–≤–ª—è–µ–º –≤–∏–¥–∂–µ—Ç—ã –≤ layout
            item_layout.add_widget(title)
            item_layout.add_widget(desc)
            item_layout.add_widget(buy_btn)

            # –î–æ–±–∞–≤–ª—è–µ–º —Ç–æ–≤–∞—Ä –≤ –∫–∞—Ç–∞–ª–æ–≥
            self.catalog_box.add_widget(item_layout)

    def buy_item(self, item):
        if UserData.points >= item['cost']:
            UserData.points -= item['cost']
            self.update_profile()
            self.message_label.text = f"–í—ã –∫—É–ø–∏–ª–∏ {item['name']}! –û—Å—Ç–∞—Ç–æ–∫ –±–∞–ª–ª–æ–≤: {UserData.points}"
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ–≤—ã–µ –±–∞–ª–ª—ã
            data = load_user_data()
            if UserData.login not in data:
                data[UserData.login] = {}
            data[UserData.login]["points"] = UserData.points
            save_user_data(data)
        else:
            self.message_label.text = "–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –±–∞–ª–ª–æ–≤ –¥–ª—è –ø–æ–∫—É–ø–∫–∏!"

    def go_back(self, instance):
        self.manager.current = "main"
        self.manager.get_screen("main").show_profile()

        
        


# === –ó–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è ===
class EcoCityApp(App):
    def build(self):
        sm = ScreenManager(transition=FadeTransition())
        sm.add_widget(AuthScreen(name="auth"))
        sm.add_widget(MainScreen(name="main"))
        sm.add_widget(MapScreen(name="map"))
        sm.add_widget(FoodScreen(name="food"))
        sm.add_widget(ChatScreen(name="chat"))  # –¥–æ–±–∞–≤–ª—è–µ–º –º–µ—Å—Å–µ–Ω–¥–∂–µ—Ä
        sm.add_widget(AboutScreen(name="about"))
        sm.add_widget(VolunteerScreen(name="volunteer"))
        sm.add_widget(StoreScreen(name="store"))
        sm.add_widget(EcoAssistantScreen(name="eco_ai"))
        sm.current = "auth"
        return sm


if __name__ == "__main__":
    EcoCityApp().run()
