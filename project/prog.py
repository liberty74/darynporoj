import os
import torch
import clip
from PIL import Image as PILImage

from kivy.app import App
from kivy.uix.screenmanager import ScreenManager, Screen, FadeTransition
from kivy.uix.label import Label
from kivy.uix.button import Button
from kivy.uix.boxlayout import BoxLayout
from kivy.uix.image import Image
from kivy.uix.relativelayout import RelativeLayout
from kivy_garden.mapview import MapView, MapMarker
from kivy.uix.filechooser import FileChooserIconView, FileChooserListView
from kivy.uix.dropdown import DropDown

# === CLIP –∑–∞–≥—Ä—É–∑–∫–∞ ===
device = "cuda" if torch.cuda.is_available() else "cpu"
model, preprocess = clip.load("ViT-B/32", device=device)


class BaseScreen(Screen):
    """–ë–∞–∑–æ–≤—ã–π —ç–∫—Ä–∞–Ω —Å —Ñ–æ–Ω–æ–º"""
    def __init__(self, **kwargs):
        super().__init__(**kwargs)
        self.layout = RelativeLayout()

        # –§–æ–Ω
        self.bg = Image(source="background.jpg", allow_stretch=True, keep_ratio=False)
        self.layout.add_widget(self.bg)

        self.content = BoxLayout(
            orientation='vertical',
            padding=20,
            spacing=15,
            size_hint=(0.9, 0.9),
            pos_hint={'center_x': 0.5, 'center_y': 0.5}
        )
        self.layout.add_widget(self.content)
        self.add_widget(self.layout)


class MainScreen(BaseScreen):
    def __init__(self, **kwargs):
        super().__init__(**kwargs)

        self.content.add_widget(Label(
            text="–ú–∏—Å–∫–∞ –¥–æ–±—Ä–∞-–¥–æ–±—Ä–æ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å –≤–∞—Å!",
            font_size=30,
            bold=True,
            color=(1, 1, 1, 1)
        ))

        buttons = [
            ("–ö–∞—Ä—Ç–∞ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤", self.go_to_map),
            ("–ü—Ä–æ–≤–µ—Ä–∫–∞ –µ–¥—ã", self.go_to_food),
        ]

        for text, action in buttons:
            btn = Button(
                text=text,
                background_color=(0.2, 0.6, 0.2, 1),
                color=(1, 1, 1, 1),
                font_size=18,
                size_hint=(1, None),
                height=50
            )
            btn.bind(on_press=action)
            self.content.add_widget(btn)

    def go_to_map(self, instance):
        self.manager.current = "map"

    def go_to_food(self, instance):
        self.manager.current = "food"


class MapScreen(BaseScreen):
    def __init__(self, **kwargs):
        super().__init__(**kwargs)
        self.content.add_widget(Label(text="üó∫ –ö–∞—Ä—Ç–∞ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤", font_size=22, bold=True))

        self.map_view = MapView(zoom=14, lat=53.2835, lon=69.3969)
        self.content.add_widget(self.map_view)

        self.add_markers()

        self.content.add_widget(Button(
            text="‚¨Ö –ù–∞–∑–∞–¥",
            background_color=(0.2, 0.6, 0.2, 1),
            on_press=self.go_back
        ))

    def add_markers(self):
        locations = [
            {"lat": 53.2835, "lon": 69.3969, "icon": "cache/eco_bin_icon.jpg"},
            {"lat": 53.2821, "lon": 69.3897, "icon": "cache/eco_bin_icon.jpg"},
            {"lat": 53.2940, "lon": 69.4048, "icon": "cache/eco_bin_icon.jpg"},
        ]

        for loc in locations:
            marker = MapMarker(lat=loc["lat"], lon=loc["lon"], source=loc["icon"])
            self.map_view.add_widget(marker)

    def go_back(self, instance):
        self.manager.current = "main"


class FoodScreen(BaseScreen):
    """–≠–∫—Ä–∞–Ω –ø—Ä–æ–≤–µ—Ä–∫–∏ –µ–¥—ã —á–µ—Ä–µ–∑ CLIP"""
    def __init__(self, **kwargs):
        super().__init__(**kwargs)

        self.header = Label(text="–ü—Ä–æ–≤–µ—Ä–∫–∞ –µ–¥—ã", font_size=22, bold=True)
        self.content.add_widget(self.header)

        # –ö–Ω–æ–ø–∫–∞ –≤—ã–±–æ—Ä–∞ –∫–∞—Ä—Ç–∏–Ω–∫–∏
        self.upload_btn = Button(
            text="–ó–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–æ—Ç–æ",
            background_color=(0.2, 0.6, 0.8, 1),
            font_size=18,
            size_hint=(1, None),
            height=50
        )
        self.upload_btn.bind(on_press=self.open_filechooser)
        self.content.add_widget(self.upload_btn)

        # –î–ª—è –≤—ã–≤–æ–¥–∞ –∫–∞—Ä—Ç–∏–Ω–∫–∏
        self.food_img = Image(size_hint=(1, 0.6))
        self.content.add_widget(self.food_img)

        # –¢–µ–∫—Å—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
        self.result_label = Label(
            text="–ó–¥–µ—Å—å –ø–æ—è–≤–∏—Ç—Å—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç",
            font_size=18,
            color=(1, 1, 1, 1)
        )
        self.content.add_widget(self.result_label)

        # –ù–∞–∑–∞–¥
        self.back_btn = Button(
            text="‚¨Ö –ù–∞–∑–∞–¥",
            background_color=(0.2, 0.6, 0.2, 1),
            on_press=self.go_back
        )
        self.content.add_widget(self.back_btn)

    def open_filechooser(self, instance):
        """–û—Ç–∫—Ä—ã–≤–∞–µ—Ç –¥–∏–∞–ª–æ–≥ –≤—ã–±–æ—Ä–∞ —Ñ–∞–π–ª–∞ —Å –¥–æ—Å—Ç—É–ø–æ–º –∫ –†–∞–±–æ—á–µ–º—É —Å—Ç–æ–ª—É –∏ –ó–∞–≥—Ä—É–∑–∫–∞–º"""
        self.content.clear_widgets()
        self.content.add_widget(Label(text="üìÇ –í—ã–±–µ—Ä–∏—Ç–µ —Ñ–æ—Ç–æ", font_size=20, bold=True))

        user_home = os.path.expanduser("~")
        self.paths = {
            "–ü—Ä–æ–µ–∫—Ç": ".",
            "–†–∞–±–æ—á–∏–π —Å—Ç–æ–ª": os.path.join(user_home, "Desktop"),
            "–ó–∞–≥—Ä—É–∑–∫–∏": os.path.join(user_home, "Downloads")
        }

        # –í—ã–ø–∞–¥–∞—é—â–∏–π —Å–ø–∏—Å–æ–∫ –¥–ª—è –≤—ã–±–æ—Ä–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
        self.dropdown = DropDown()
        for name, path in self.paths.items():
            btn = Button(text=name, size_hint_y=None, height=40)
            btn.bind(on_release=lambda btn: self.change_directory(btn.text))
            self.dropdown.add_widget(btn)

        main_button = Button(text="–í—ã–±—Ä–∞—Ç—å –ø–∞–ø–∫—É", size_hint=(1, None), height=40)
        main_button.bind(on_release=self.dropdown.open)
        self.content.add_widget(main_button)

        # –§–∞–π–ª–æ–≤—ã–π –≤—ã–±–æ—Ä
        self.filechooser = FileChooserIconView(
            path=".",
            filters=["*.png", "*.jpg", "*.jpeg"],
            size_hint=(1, 0.8)
        )
        self.filechooser.bind(on_submit=self.selected_file)
        self.content.add_widget(self.filechooser)

        # –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        controls = BoxLayout(size_hint=(1, None), height=50, spacing=10)
        open_btn = Button(text="–û—Ç–∫—Ä—ã—Ç—å", background_color=(0.2, 0.6, 0.8, 1))
        open_btn.bind(on_press=lambda x: self.selected_file(None, self.filechooser.selection, None))
        cancel_btn = Button(text="–û—Ç–º–µ–Ω–∞", background_color=(0.6, 0.2, 0.2, 1))
        cancel_btn.bind(on_press=lambda x: self.reset_ui())
        controls.add_widget(open_btn)
        controls.add_widget(cancel_btn)

        self.content.add_widget(controls)

    def change_directory(self, name):
        """–°–º–µ–Ω–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –≤ —Ñ–∞–π–ª–æ–≤–æ–º –º–µ–Ω–µ–¥–∂–µ—Ä–µ"""
        if name in self.paths:
            self.filechooser.path = self.paths[name]
        self.dropdown.dismiss()

    def selected_file(self, filechooser, selection, touch):
        if selection:
            file_path = selection[0]
            self.food_img.source = file_path
            self.analyze_image(file_path)
            self.reset_ui()

    def reset_ui(self):
        """–í–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π UI"""
        self.content.clear_widgets()
        self.content.add_widget(self.header)
        self.content.add_widget(self.upload_btn)
        self.content.add_widget(self.food_img)
        self.content.add_widget(self.result_label)
        self.content.add_widget(self.back_btn)

    def analyze_image(self, file_path):
        image = preprocess(PILImage.open(file_path)).unsqueeze(0).to(device)

        text_descriptions = [
            "not food",
            "fresh food",
            "edible food",
            "tasty food",
            "rotten food",
            "food with mold"
        ]
        text_tokens = clip.tokenize(text_descriptions).to(device)

        with torch.no_grad():
            image_features = model.encode_image(image)
            text_features = model.encode_text(text_tokens)
            image_features /= image_features.norm(dim=-1, keepdim=True)
            text_features /= text_features.norm(dim=-1, keepdim=True)
            similarity = (image_features @ text_features.T).squeeze(0)

        best_idx = similarity.argmax().item()
        best_label = text_descriptions[best_idx]

        if "fresh" in best_label or "edible" in best_label or "tasty" in best_label:
            result_text = "–≠—Ç—É –µ–¥—É –º–æ–∂–Ω–æ –µ—Å—Ç—å!"
        elif "rotten" in best_label or "mold" in best_label:
            result_text = "–≠—Ç—É –µ–¥—É –µ—Å—Ç—å –Ω–µ–ª—å–∑—è!"
        else:
            result_text = "–≠—Ç–æ –≤–æ–æ–±—â–µ –Ω–µ –µ–¥–∞!"

        self.result_label.text = f"CLIP —Å—á–∏—Ç–∞–µ—Ç: {best_label}\n\n{result_text}"

    def go_back(self, instance):
        self.manager.current = "main"


class EcoCityApp(App):
    def build(self):
        sm = ScreenManager(transition=FadeTransition())
        sm.add_widget(MainScreen(name="main"))
        sm.add_widget(MapScreen(name="map"))
        sm.add_widget(FoodScreen(name="food"))  # üëà –Ω–æ–≤—ã–π —ç–∫—Ä–∞–Ω
        return sm


if __name__ == "__main__":
    EcoCityApp().run()
