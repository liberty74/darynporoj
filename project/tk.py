import tkinter as tk
from tkinter import filedialog
from PIL import Image
import torch
import clip

# –ó–∞–≥—Ä—É–∂–∞–µ–º –º–æ–¥–µ–ª—å CLIP
device = "cuda" if torch.cuda.is_available() else "cpu"
model, preprocess = clip.load("ViT-B/32", device=device)

# –§—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
def analyze_image():
    # –í—ã–±–∏—Ä–∞–µ–º —Ñ–∞–π–ª
    file_path = filedialog.askopenfilename(filetypes=[("Image files", "*.png;*.jpg;*.jpeg")])
    if not file_path:
        return
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
    image = preprocess(Image.open(file_path)).unsqueeze(0).to(device)
    
    # –°–ø–∏—Å–æ–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö –æ–ø–∏—Å–∞–Ω–∏–π
    text_descriptions = [
        "not food",
        "fresh food",
        "edible food",
        "tasty food",
        "rotten food",
        "food with mold"
    ]
    text_tokens = clip.tokenize(text_descriptions).to(device)
    
    # –ü–æ–ª—É—á–∞–µ–º —Å—Ö–æ–¥—Å—Ç–≤–æ
    with torch.no_grad():
        image_features = model.encode_image(image)
        text_features = model.encode_text(text_tokens)
        image_features /= image_features.norm(dim=-1, keepdim=True)
        text_features /= text_features.norm(dim=-1, keepdim=True)
        similarity = (image_features @ text_features.T).squeeze(0)
    
    # –ù–∞—Ö–æ–¥–∏–º –Ω–∞–∏–±–æ–ª–µ–µ –ø–æ–¥—Ö–æ–¥—è—â–µ–µ –æ–ø–∏—Å–∞–Ω–∏–µ
    best_idx = similarity.argmax().item()
    best_label = text_descriptions[best_idx]

    # –°–Ω–∞—á–∞–ª–∞ –≤—ã–≤–æ–¥–∏–º, —á—Ç–æ –¥—É–º–∞–µ—Ç CLIP
    clip_text = f"CLIP —Å—á–∏—Ç–∞–µ—Ç, —á—Ç–æ —ç—Ç–æ: {best_label}\n"

    # –ü–æ—Ç–æ–º –¥–∞—ë–º —Ä–µ—à–µ–Ω–∏–µ
    if "fresh" in best_label or "edible" in best_label or "tasty" in best_label:
        result_text = "‚úÖ –≠—Ç—É –µ–¥—É –º–æ–∂–Ω–æ –µ—Å—Ç—å!"
    elif "rotten" in best_label or "mold" in best_label:
        result_text = "‚ùå –≠—Ç—É –µ–¥—É –µ—Å—Ç—å –Ω–µ–ª—å–∑—è!"
    else:
        result_text = "üö´ –≠—Ç–æ –≤–æ–æ–±—â–µ –Ω–µ –µ–¥–∞!"

    # –í—ã–≤–æ–¥–∏–º –≤—Å—ë –≤–º–µ—Å—Ç–µ
    result_label.config(text=clip_text + result_text)

# –°–æ–∑–¥–∞–µ–º –æ–∫–Ω–æ Tkinter
root = tk.Tk()
root.title("Food Safety Checker")

# –ö–Ω–æ–ø–∫–∞ –¥–ª—è –≤—ã–±–æ—Ä–∞ –∏ –∞–Ω–∞–ª–∏–∑–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
btn = tk.Button(root, text="–ó–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–æ—Ç–æ –µ–¥—ã", command=analyze_image, font=("Arial", 12))
btn.pack(pady=20)

# –ú–µ—Å—Ç–æ –¥–ª—è –≤—ã–≤–æ–¥–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
result_label = tk.Label(root, text="", font=("Arial", 16), justify="center")
result_label.pack(pady=20)

root.mainloop()
